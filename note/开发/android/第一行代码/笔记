### 四大组件

Android系统的四大组件分别是**活动（Activity）、服务（Service）、广播接收器（Broadcast Receiver）和内容提供器（Content Provider）**

- **Activity**

	Activity是所有Android应用程序的门面，凡是在应用中看得到的东西，都是放在活动中

- **Service**

	Service比较低调，无法看到它，它会一直在后台默默运行，即使用户退出了应用，服务仍然是可以继续运行的

- **Broadcast Receiver**

	Broadcast Receiver允许你的应用接收来自各处的广播消息，比如电话、短信等，当然你的应用同样也可向外发出广播消息

- **Content Provider**

	内容提供器则为应用程序之间共享数据提供了可能。比如想要读取系统电话簿中的联系人，就需要通过内容提供器来实现

---
### Intent

Intent是Android中各组件之间交互的一种重要方式，不仅可以指明当前组件想要执行的动作，还可以在不同组件之间传递数据。Intent一般可用于启动活动、启动服务以及发送广播等场景。

Intent大致分为两种：**显式**和**隐式**。

#### 显式

`Intent(Context packageContext, Class<?> cls)`，这个构造函数接收两个参数，第一个Context要求提供一个**启动活动**的上下文，第二个参数Class则是指定想要启动的**目标活动**

Activity类中提供了一个`startActivity()`方法专门用来启动活动。

```java
Intent intent = new Intent(FirstActivity.this, SecondActivity.class); // FirstActivity.this作为上下文，SecondActivity.class作为目标活动
startActivity(intent);
```
#### 隐式

隐式Intent不会明确指定我们想要启动哪一个活动，而是指定了一些列更为抽象的action和category等信息，然后交由系统去分析这个Intent，并找出合适的活动去启动。
这种隐式intent不仅可以启动自己程序内的活动，也可以启动其他程序的活动。

```xml
<!-- AndroidManifest.xml -->

<activity android:name=".SecondActivity">
	<intent-filter>
		<action android:name="com.example.activitytest.ACTION_START"/>
		<category android:name="android.intent.category.DEFAULT"/>
	</intent-filter>
</activity>
```

`<action>`标签中指明了当前活动可以相应`com.example.activitytest.ACTION_START`这个action，而`<category>`标签则包含了一些附加信息，更精确地指明了当前活动能够响应的Intent中还可能带有category。只有`<action>`和`<category>`中的内容同时匹配上Intent中指定的action和category时，这个活动才会响应该Intent。

```java
...
@Override
public void onClick(View v){
	Intent intent = new Intent("com.example.activitytest.ACTION_START"); // 上面设置的category为default，所以可以不指定
	// intent.addCategory("com.example.activitytest.xxx");
	startActivity(intent);
}
...
```
---

### 生存周期

Activity类中定义了7个回调方法，覆盖了活动生命周期的每一环节：

- onCreate()
	活动第一次被创建时调用，可以在这里面完成活动的初始化操作。比如加载布局、绑定事件
- onStart()
	活动由不可见变为可见时调用
- onResume()
	活动准备好与用户进行交互时调用，此时活动一定位于返回栈顶，且处于运行状态
- onPause()
	这个方法在系统准备去启动或恢复**另一个**活动时调用
- onStop()
	活动完全不可见时调用。与onPause区别在于：如果启动的新活动是一个对话框之类的，则onPause执行、而onStop不执行
- onDestory()
	活动被销毁之前调用，之后的活动变为销毁状态
- onRestart()
	活动重新被启动

### 活动的启动模式

每个应用程序都有自己的返回栈。活动的启动模式有4种，分别是**standard**、**singleTop**、**singleTask**、**singleInstance**。可以在**AndroidMainfest.xml**中通过**<activity>**标签指定`android:launchMode`属性来选择启动模式

- standard
	默认的启动模式，每当启动一个新的活动，它就会在返回栈中入栈，并处于栈顶的位置。也就是说，系统不会在乎这个活动是否已经在返回栈中存在，每次启动都会创建该活动的一个新的实例。
- singleTop
	启动活动时，如果发现返回栈的栈顶已经是该互动，则认为可直接使用它，不会再创建新的活动实例。不过如果它未在栈顶，这是启动该activity还是会创建新实例的
- singleTask
	指定为singleTask，每次启动该活动时系统首先会在返回栈中检查是否存在该活动的实例，如果发现已存在，则直接使用，并把**在这个活动之上的所有活动统统出栈**，如果没有发现就会创建也给新的活动实例
- singleInstance
	指定为singleInstance模式的活动会启用一个新的返回栈来管理这个活动（其实singleTask模式指定了不同的taskAffinity也会启动一个新的返回栈）。

---
### 广播（Broadcast）

Android的广播主要分两种：**标准广播**和**有序广播**

- **标准广播**

	是一种完全异步执行的广播，在广播发出后，所有的广播接收器几乎都会在第一时间接收到这条广播消息，他们之间没有任何先后顺序可言。这种广播的效率比较高，但同时也意味着无法被阶段。

	![标准广播](/images/Thu-Aug--9-00:48:02-2018_937504.png "标准广播")
- **有序广播**

	这是一种同步执行的广播，在广播发出后，同一时刻只有一个广播接收器可以收到这条广播消息，当这个广播接收器的逻辑执行完毕后，广播才可以继续传递。所以此时的广播接收器是有先后顺序的，优先级高的广播接收器就可以先收到广播消息，并且前面的广播接收器还可以拦截正在传递的广播，这样后面的广播接收器就无法收到广播消息了。

	![有序广播](/images/Thu-Aug--9-00:51:37-2018_284891.png "有序广播")

Android中内置了很多系统级别的广播，可以在应用程序中通过舰艇这些广播来得到各种系统的状态信息。比如手机开机完成后后发出一条广播，电量变化会发出一条广播，时区变化也会发出一条广播等。要想接收这些广播，这就需要广播接收器。

广播接收器可以自由地对自己感兴趣的广播进行注册，这样有相应的广播发出时，广播接收器就能收到该广播，并进行处理。

广播接收器注册一般有两种方式，在代码中注册（动态注册）、在AndroidManifest.xml中注册（静态注册）

### 跨程序共享数据-内容提供器（Content Porvider）

内容提供器（Content Provider）主要用于在不同的应用程序之间实现数据共享的功能。它提供了一套完整的机制，允许一个程序访问另一个程序中的数据，同时还能保证被访问数据的安全性。目前使用内容提供器是Android实现跨程序共享数据的标准方式

内容提供器可以选择只对哪一部分数据进行共享，从而保证我们程序的隐私数据不会有泄露风险

内容提供器的用法一般有两种，一种是使用现有的内容提供器来读取和操作相应程序中的数据，另一种是创建自己的内容提供器给我们的程序提供外部访问接口。

如果一个应用程序通过内容提供器对其数据提供了外部访问接口，那么任何其他的应用程序就可以对这部分数据进行访问。Android系统中自带的电话簿、短信、媒体库等程序都提供了类似的访问接口。

不同于sqlLite使用的表名参数，内容提供器使用**Uri**参数来代替，这个参数被称为内容URI，给内容提供器中的数据建立了唯一的标识符。它由两部分组成：**authority**和**path**。authority是对不同应用程序做区分的，一般用包名来命名。path是对同一应用程序的不同的表做区分的，通常会加在authority的后面。标准写法如下：

```c
//schema     authority              path
content://com.example.app.provider/table1
content://com.example.app.provider/table2
```

其调用方式如下：

```java
Uri uri = Uri.parse("content://com.example.app.provider/table1"); // 构造uri

Cursor cursor = getContentResolver().query( // 查询，返回游标
	uri,				// uri，对应 from table_name，指定查询某个应用程序下的某张表
	projection,			// 对应 select column1, column2，指定查询的列名
	selection,			// 对应 where column=value，指定where的约束条件
	selectionArgs,		// 为where中的占位符提供具体的值
	sortOrder			// 对应 order by column1, column2，指定查询结果的排序方式
);

ContentValues values = new ContentValues();
values.put("column1", "text");
values.put("column2", 1);
getContentResolver().insert(uri, values);	// 插入

ContentValues values = new ContentValues();
values.put("column1", "");
getContentResolver().update(uri, values, "column1=? and column2=?", new String[]{"text","1"});	// 更新

getContentResolver().delete(uri, "column2=?", new String[]}{"1"});	// 删除
```

#### 创建内容提供器

```java
// ContentProvider类中有6个抽象方法，子类继承它时需要全部重写

public class MyProvider extends ContentProvider{
	@Overrider
	public boolean onCreate(){	// 初始化时调用，通常这里会完成对数据库的创建和升级操作
		return false;
	}
	@Overrider
	public Cursor query(Uri uri, String[] projection, String selection,
		String[] selectionArgs, String sortOrder){
		// 查询，
		// uri来确定查哪张表，
		// projection确定查哪些列，
		// selection和selectionArgs用于约束查询哪些行
		// sortOrder用于对结果排序
		// 查询的结果存放至Cursor对象中返回
		return null;
	}
	@Overrider
	public Uri insert(Uri uri, ContentValues values){
		// 插入
		// uri确定插入哪张表
		// 待插入的数据在values中
		// 返回用于表示这条新纪录的URI
		return null;
	}
	@Overrider
	public int update(Uri uri, ContentValues values, String selection,
		String[] selectionArgs){
		// 更新
		// uri确定操作哪张表
		// 新数据在values中
		// selection和selectionArgs参数用于约束更新哪些行
		// 返回受影响的行数
		return 0;
	}
	@Overrider
	public int delete(Uri uri, String selection, String[] selectionArgs){
		// 删除
		// uri确定操作哪张表
		// selection和selectionArgs确定删除哪些行
		// 返回被删除的行数
		return 0;
	}
	@Overrider
	public String getType(Uri uri){
		// 根据传入的内容URI来返回相应的MIME类型
		return null;
	}
}
```

### 服务（service）

服务（Service）是Android中实现服务后台运行的解决方案，它非常适合去执行哪些不需要和用户交互而且还要求长期运行的任务。

不过服务并不是运行在一个独立的进程中的，而是依赖于创建服务时所在的应用程序进程。但某个应用程序被杀掉时，所有依赖于该进程的服务也会停止运行

另外也不要被服务的后台概念迷惑，实际上服务并不会自动开启线程，并在这里执行具体的任务，否则就有可能出现主线程被阻塞住的情况。


















