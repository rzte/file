### APK动态分析

#### [AndBug](https://github.com/swdunlop/AndBug)

AndBug可用来在不需要源代码的情况下调试android程序，依赖于python

- 配置
	```bash
	$ git clone https://github.com/swdunlop/AndBug.git
	$ export PYTHONPATH=`pwd`/lib
	$ make
	```
- 运行
	在adb连接android目标机后，可根据包名或进程号开启AndBug调试
	```bash
	$ adb shell pm list packages | grep example # 列出目标包名
	package:com.example.rz.myapplication
	$ ./andbug shell -p com.example.rz.myapplication # 开始调试
	```

### Hook技术

#### Hook原理

Hook技术无论对安全软件还是恶意软件都是一项十分关键的技术，其本质就是劫持函数调用。但是用户处于Linux用户态，每个进程都有自己的进程空间，所以必须先注入到所要Hook的进程空间，修改器内存中的进程代码，替换其过程表中的符号地址。

在Android中一般是通过**ptrace**函数附加进程，然后向远程进程注入so库，从而达到监控以及远程进程关键函数挂钩。**Hook技术的难点不在于Hook技术，而是如何找到函数的入口点、替换函数，这就涉及到了理解函数的连接与加载机制。**

就Android的开发来说，Android本身提供了两种开发方式，基于Android SDK的Java语言开发，基于Android NDK的native C/C++语言开发。所以我们在讨论Hook的时候必须在两个层面上来讨论。**对于Native层来说Hook的难点在于理解ELF文件与学习ELF文件。对于Java层来说，Hook就需要了解虚拟机的特性与Java反射的使用。**

















