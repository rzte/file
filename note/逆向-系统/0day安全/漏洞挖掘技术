# 漏洞挖掘技术简介

## 静态代码审计

学术界偏向于对源码的静态分析，相关的方法和理论有很多，如：数据流分析、类型验证系统、边界检验系统、状态机系统等。所有这些方法都可追溯到 1976 年一篇发表于 ACM Computing Seurverys 上的著名论文 [Data Flow Analysis in Soft ware rReliability](http://laser.cs.umass.edu/courses/cs521-621/papers/FosdickOsterweil.pdf)

## 动态测试技术

### SPIKE简介

SPIKE是一款著名的Protocol Fuzz（针对网络协议的模糊测试）工具，是一个完全开源的免费工具。它引入了基于数据块的Fuzz理论 -- 根据协议的规则生成fuzz内容。除了强大的数据格式定义能力外，作为 Protocol Fuzz，SPIKE还提供了一些用于网络操作的函数。

### beSTORM简介

beSTORM程序是由 Beyond Security 安全公司设计开发的，是运行在windows下的一款全能型安全审计程序，它利用模糊测试来实现针对网络协议的安全测试。之所以说这款程序是一个全能型测试程序，不仅仅因为它采用了分体设计（即自动化测试部分为一个独立程序 beSTORM Client，实时监控部分为另一个独立程序 beSTORM Monitor），更因为它可用针对多种不通的网络协议进行安全测试，无论是明文还是非明文。

# 漏洞挖掘

## 文件格式Fuzz

一个 File Fuzz 工具大体的工作流程包括以下几步：

- 以一个正常的文件模板为基础，按照一定规则产生一批畸形文件
- 将畸形文件逐一送入软件进行检测，并监视软件是否会抛出异常
- 记录软件产生的错误信息，如寄存器状态、栈状态等
- 用日志或其他UI形式向测试人员展示异常信息，以进一步鉴定这些错误能否被利用

现代软件往往使用非常复杂的私有数据结构，不过数据结构越复杂，解析逻辑越复杂，就越容易出现安全漏洞。在这种情况下，传统的Blind Fuzz会暴露出一些不足，例如：产生测试用例的策略缺少针对性，生成大量无效测试用例，难以发现复杂解析器深层逻辑漏洞等。

针对 Blind Fuzz 的不足，Smart Fuzz越来越多的被提出和应用，通常 Smart Fuzz包括三方面特征：面向逻辑、面向数据类型、基于样本。在一个好的Smart Fuzz工具中，这三种特性都会被包含

- 面向逻辑

测试前首先明确要测试的目标是解析文件的程序逻辑，而不是文件本身。复杂的文件会经过多层解析，在明确了测试的逻辑目标后，在生成畸形数据时可用只针对性的仅仅改动样本文件的特定位置，尽量不破坏其他数据依赖关系，使得畸形数据能够传递到要测试的逻辑深度，而不会在上层的解析器中丢弃

- 面向数据类型

测试中生成的数据通常包括以下几种类型：

1. 算数型：包括 HEX、ASCII、Unicode、Raw格式存在的各种数值
2. 指针型：包括 NULL 指针、合法/非法 的内存指针等
3. 字符串型：包括超长的字符串，缺少终止符（0x00）的字符串等
4. 特殊字符：包括 # @ ' < > / \ ... / 等

- 基于样本

测试前首先构造一个合法的样本文件，以这个文件为模板，每次只改动一小部分数据和逻辑来生成畸形文件，这种方法也叫做“变异“

代表工具：Peach






