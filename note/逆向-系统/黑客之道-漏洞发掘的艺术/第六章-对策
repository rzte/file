# 守护程序

守护程序是在后台运行，且以某种方式与控制终端分离的程序。程序一般以一个字母d(daemon)结尾以表示它们是守护程序，如 sshd 或者 syslogd

daemon()函数将衍生一个新的后台进程，linux的许多守护程序进程都会使用这个函数

```
NAME
    daemon - run in the background

SYNOPSIS
    #include <unistd.h>

    int daemon(int nochdir, int noclose);

Feature Test Macro Requirements for glibc (see feature_test_macros(7)):

    daemon():
        Since glibc 2.21:
            _DEFAULT_SOURCE
        In glibc 2.19 and 2.20:
            _DEFAULT_SOURCE || (_XOPEN_SOURCE && _XOPEN_SOURCE < 500)
        Up to and including glibc 2.19:
            _BSD_SOURCE || (_XOPEN_SOURCE && _XOPEN_SOURCE < 500)
```

## 信号

信号是 UNIX 进程间通信的方法。在某个进程收到一个信号时，其执行流程将被操作系统中断，以便调用信号处理程序。信号通过数字来辨识，每个信号有默认的信号处理程序。例如在程序控制终端按 Ctrl+C键时，将发送一个中断信号，该信号的默认处理程序将退出该程序。这样即使该程序陷于死循环中，也允许这样退出程序。注意，`kill -9`发送的 SIGKILL 信号，应用程序时无法修改的

```
#include<stdio.h>
#include<stdlib.h>
#include<signal.h>

void signal_handler(int signal){
        printf("Caught signal %d\t", signal);
        if(signal == SIGTSTP)
                printf("SIGTSTP(Ctrl-Z)");
        else if(signal == SIGQUIT)
                printf("SIGQUIT(Ctrl-\\)");
        else if(signal == SIGUSR1)
                printf("SIGUSR1");
        else if(signal == SIGUSR2)
                printf("SIGUSR2");
        printf("\n");
}

void sigint_handler(int x){
        puts("Cautht a Ctrl-C(SIGINT) in a separate handler\nExiting.");
        exit(0);
}

int main(){
        // Registering signal handlers
        signal(SIGQUIT, signal_handler);
        signal(SIGTSTP, signal_handler);
        signal(SIGUSR1, signal_handler);
        signal(SIGUSR2, signal_handler);

        signal(SIGINT, sigint_handler);
        while(1){}
}
```

## 调试子进程

程序如下：

```c
void timestamp(int fd){
	time_t now;
	struct tm* time_struct;
	int length;
	char time_buffer[40];

	time(&now);
	time_struct = localtime((const time_t*)&now);
	length = strftime(time_buffer, 40, "%m%d%Y %H:%M:%S\n", time_struct);
	write(fd, time_buffer, length);
}

void main(){
	if (daemon(1,0) == -1){
		puts("forking to daemon process");
		exit(-1);
	}

	while (1){
		timestamp(1);
		sleep(1);
	}
}
```

在`daemon`后，开启了子进程，正常调试仍跟踪父进程，会直接结束。可用用`follow-fork-mode`设置为child来实现，这样调试程序将跟踪到子进程中，在其中会遇到断点

```c
gdb-peda$ help set follow-fork-mode
Set debugger response to a program call of fork or vfork.
A fork or vfork creates a new process.  follow-fork-mode can be:
  parent  - the original process is debugged after a fork
  child   - the new process is debugged after a fork
The unfollowed process will continue to run.
By default, the debugger will follow the parent process.

gdb-peda$ set follow-fork-mode child
gdb-peda$ r
Starting program: /tmp/a.out
[Attaching after process 2916 fork to child process 2920]
[New inferior 2 (process 2920)]
[Detaching after fork from parent process 2916]
[Inferior 1 (process 2916) detached]
[Switching to process 2920]
...
...
```

或者直接附加子进程

```c
rz@kali:/tmp$ ps -ef | grep a.out
rz         2613      1  0 15:26 ?        00:00:00 ./a.out
rz         2975   2793  0 15:41 pts/1    00:00:00 grep a.out
rz@kali:/tmp$ gdb -q --pid 2613 --symbols ./a.out
Reading symbols from ./a.out...done.
Attaching to process 2613
No executable file now.
...
...
```

# 巩固对策

漏洞发掘一般可化为3个步骤：

- 破坏某些类型的内存内容

- 然后改变控制流程

- 最后执行shellcode

## 不可执行堆栈

大多数程序不需要在堆栈中执行任何操作，因此防止缓冲区溢出漏洞挖掘的一种明显方法就是使堆栈不可执行

一般可通过ROP来绕过

## 随机排列堆栈空间

ASLR，全称为 Address Space Layout Randomization，地址空间布局随机化。ASLR 技术在 2005 年的 kernel 2.6.12 中被引入到 Linux 系统，它将进程的某些内存空间地址进行随机化来增大入侵者预测目的地址的难度，从而降低进程被成功入侵的风险。当前 Linux、Windows 等主流操作系统都已经采用该项技术。linux中对应 `/proc/sys/kernel/randomize_va_space`





















